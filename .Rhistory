cor_developed <- cor(developed_countries[, c("Life_expectancy",  "percentage_expenditure", "Adult_Mortality", "Hepatitis_B")], use = "complete.obs")
# Correlations for developing countries
cor_developing <- cor(developing_countries[, c("Life_expectancy",  "percentage_expenditure", "Adult_Mortality", "Hepatitis_B")], use = "complete.obs")
print(cor_developed)
print(cor_developing)
model_le2 <- lm(Life_expectancy ~ Total_expenditure + Status + GDP + Schooling + Alcohol, data = life_exp)
anova(model_le2)
vif(model_le2)
summary(model_le2)
model_le2 <- lm(Life_expectancy ~ Total_expenditure + Status + GDP + Schooling + Alcohol, data = life_exp)
anova(model_le2)
vif(model_le2)
summary(model_le2) |>
kable(digits = 3)
library(knitr)
model_le2 <- lm(Life_expectancy ~ Total_expenditure + Status + GDP + Schooling + Alcohol, data = life_exp)
anova(model_le2)
vif(model_le2)
summary(model_le2) |>
kable(digits = 3)
library(knitr)
model_le2 <- lm(Life_expectancy ~ Total_expenditure + Status + GDP + Schooling + Alcohol, data = life_exp)
anova(model_le2)
vif(model_le2)
summary(model_le2)
library(knitr)
model_le2 <- lm(Life_expectancy ~ Total_expenditure + Status + GDP + Schooling + Alcohol, data = life_exp)
anova(model_le2)
vif(model_le2)
summary(model_le2)
library(forecast)
library(forecast)
library(tseries)
# Subset the relevant columns (Year and Life_expectancy)
life_exp_ts <- ts(life_exp$Life_expectancy, start = min(life_exp$Year), frequency = 1)
library(forecast)
library(tseries)
# Subset the relevant columns (Year and Life_expectancy)
life_exp_ts <- ts(life_exp$Life_expectancy, start = min(life_exp$Year), frequency = 1)
adf.test(life_exp_ts)
library(forecast)
library(tseries)
# Subset the relevant columns (Year and Life_expectancy)
life_exp_ts <- ts(life_exp$Life_expectancy, start = min(life_exp$Year), frequency = 1)
adf.test(life_exp_ts)
library(forecast)
library(tseries)
# Subset the relevant columns (Year and Life_expectancy)
life_exp_ts <- ts(life_exp$Life_expectancy, start = min(life_exp$Year), frequency = 1)
adf.test(life_exp_ts)
library(forecast)
library(tseries)
sum(is.na(life_exp$Life_expectancy))
# Subset the relevant columns (Year and Life_expectancy)
life_exp_ts <- ts(life_exp$Life_expectancy, start = min(life_exp$Year), frequency = 1)
adf.test(life_exp_ts)
library(tidyverse)
library(dplyr)
life_exp <- read_csv("data/Life Expectancy Data.csv")
colnames(life_exp) <- gsub(" ", "_", colnames(life_exp))
colnames(life_exp) <- gsub("-", "_", colnames(life_exp))
colnames(life_exp) <- gsub("__", "_", colnames(life_exp))
colnames(life_exp)
life_exp |>
ggplot(aes(x = Life_expectancy))+
geom_histogram(binwidth = 2) +
labs(
title = "Distribution of Life Expectancy",
y = "Count",
x = "Life Expectancy (years)"
)
#Life Exp vs. Status
life_exp |>
ggplot(aes(x = Status, y = Life_expectancy)) +
geom_boxplot()
#Life Exp vs. Alcohol
life_exp |>
ggplot(aes(x = Alcohol, y = Life_expectancy)) +
geom_point(alpha = 0.5) +
facet_wrap(~Status)
life_exp |>
ggplot(aes(x = percentage_expenditure, y = Life_expectancy)) +
geom_point(alpha = 0.5) +
geom_smooth() +
facet_wrap(~Status)
life_exp |>
ggplot(aes(x = Total_expenditure, y = Life_expectancy)) +
geom_point()
life_exp |>
ggplot(aes(x = Status, y = infant_deaths)) +
geom_boxplot()
model_le <- lm(Life_expectancy ~ Total_expenditure + percentage_expenditure + Status + Population + GDP + Schooling + Alcohol, data = life_exp)
anova(model_le)
library(car)
vif(model_le)
library(knitr)
model_le2 <- lm(Life_expectancy ~ Total_expenditure + Status + GDP + Schooling + Alcohol, data = life_exp)
anova(model_le2)
vif(model_le2)
summary(model_le2)
model_yr <- lm(Life_expectancy ~ Year, data = life_exp)
summary(model_yr)
colnames(life_exp) <- gsub(" ", "_", colnames(life_exp))
colnames(life_exp) <- gsub("-", "_", colnames(life_exp))
colnames(life_exp) <- gsub("__", "_", colnames(life_exp))
colnames(life_exp)
life_exp_clean <- na.omit(life_exp)
life_exp_clean |>
ggplot(aes(x = Life_expectancy))+
geom_histogram(binwidth = 2) +
labs(
title = "Distribution of Life Expectancy",
y = "Count",
x = "Life Expectancy (years)"
)
#Life Exp vs. Status
life_exp_clean |>
ggplot(aes(x = Status, y = Life_expectancy)) +
geom_boxplot()
#Life Exp vs. Alcohol
life_exp_clean |>
ggplot(aes(x = Alcohol, y = Life_expectancy)) +
geom_point(alpha = 0.5) +
facet_wrap(~Status)
life_exp_clean |>
ggplot(aes(x = percentage_expenditure, y = Life_expectancy)) +
geom_point(alpha = 0.5) +
geom_smooth() +
facet_wrap(~Status)
life_exp_clean |>
ggplot(aes(x = Total_expenditure, y = Life_expectancy)) +
geom_point()
life_exp_clean |>
ggplot(aes(x = Status, y = infant_deaths)) +
geom_boxplot()
model_le <- lm(Life_expectancy ~ Total_expenditure + percentage_expenditure + Status + Population + GDP + Schooling + Alcohol, data = life_exp_clean)
anova(model_le)
library(knitr)
model_le2 <- lm(Life_expectancy ~ Total_expenditure + Status + GDP + Schooling + Alcohol, data = life_exp_clean)
anova(model_le2)
vif(model_le2)
summary(model_le2)
model_yr <- lm(Life_expectancy ~ Year, data = life_exp_clean)
summary(model_yr)
library(forecast)
library(tseries)
sum(is.na(life_exp$Life_expectancy))
# Subset the relevant columns (Year and Life_expectancy)
life_exp_ts <- ts(life_exp_clean$Life_expectancy, start = min(life_exp$Year), frequency = 1)
adf.test(life_exp_ts)
model_arima <- auto.arima(life_exp_ts)
summary(model_arima)
forecast_arima <- forecast(model_arima, h = 10)  # h = 10 is the number of time steps to forecast
plot(forecast_arima)
checkresiduals(model_arima)
forecast_arima <- forecast(model_arima, h = 5)  # h = 10 is the number of time steps to forecast
plot(forecast_arima)
forecast_arima <- forecast(model_arima, h = 20)  # h = 10 is the number of time steps to forecast
plot(forecast_arima)
forecast_arima <- forecast(model_arima, h = 20)  # h = 10 is the number of time steps to forecast
plot(forecast_arima)
time(forecast_arima)
library(forecast)
library(tseries)
# Subset the relevant columns (Year and Life_expectancy)
life_exp_ts <- ts(life_exp_clean$Life_expectancy, start = 2000, frequency = 1)
adf.test(life_exp_ts)
model_arima <- auto.arima(life_exp_ts)
summary(model_arima)
forecast_arima <- forecast(model_arima, h = 20)  # h = 10 is the number of time steps to forecast
plot(forecast_arima)
time(forecast_arima)
forecast_arima <- forecast(model_arima, h = 20)  # h = 10 is the number of time steps to forecast
plot(forecast_arima)
time(forecast_arima)
plot(forecast_arima, xaxt = "n") # suppress automatic x-axis
axis(1, at = 1:10, labels = 2024:2033) # customize x-axis with years
library(forecast)
library(tseries)
# Subset the relevant columns (Year and Life_expectancy)
life_exp_ts <- ts(life_exp_clean$Life_expectancy, start = c(2000), frequency = 1)
adf.test(life_exp_ts)
model_arima <- auto.arima(life_exp_ts)
summary(model_arima)
forecast_arima <- forecast(model_arima, h = 20)  # h = 10 is the number of time steps to forecast
plot(forecast_arima)
time(forecast_arima)
forecast_arima <- forecast(model_arima, h = 20)  # h = 10 is the number of time steps to forecast
# plot(forecast_arima)
# time(forecast_arima)
# Create a data frame to include both actual and forecasted data
# Assuming you have a time series object 'life_exp_ts' and the forecast model 'forecast_developed'
# Create a data frame to include both actual and forecasted data
forecast_df <- data.frame(
Year = c(time(life_exp_ts), time(forecast_arima$mean)),
Value = c(life_exp_ts, forecast_arima$mean),
Type = c(rep("Actual", length(life_exp_ts)), rep("Forecast", length(forecast_arima$mean)))
)
# Plot using ggplot2
library(ggplot2)
ggplot(forecast_df, aes(x = Year, y = Value, color = Type)) +
geom_line() +
scale_x_continuous(
breaks = seq(2000, 2000 + length(life_exp_ts) + length(forecast_arima$mean) - 1, by = 1)
) +
labs(title = "ARIMA Forecast for Life Expectancy", x = "Year", y = "Life Expectancy")
forecast_arima <- forecast(model_arima, h = 20)  # h = 10 is the number of time steps to forecast
# plot(forecast_arima)
# time(forecast_arima)
# Create a data frame to include both actual and forecasted data
# Assuming you have a time series object 'life_exp_ts' and the forecast model 'forecast_developed'
# Create a data frame to include both actual and forecasted data
forecast_df <- data.frame(
Year = c(time(life_exp_ts), time(forecast_arima$mean)),
Value = c(life_exp_ts, forecast_arima$mean),
Type = c(rep("Actual", length(life_exp_ts)), rep("Forecast", length(forecast_arima$mean)))
)
# Plot using ggplot2
library(ggplot2)
ggplot(forecast_df, aes(x = Year, y = Value, color = Type)) +
geom_line() +
scale_x_continuous(
breaks = seq(2000, 2000 + length(life_exp_ts) + length(forecast_arima$mean) - 1, by = 1)
) +
labs(title = "ARIMA Forecast for Life Expectancy", x = "Year", y = "Life Expectancy") +
theme(
axis.text.x = element_text(angle = 45, hjust = 1)  # Rotate x-axis labels by 45 degrees
)
forecast_arima <- forecast(model_arima, h = 20)  # h = 10 is the number of time steps to forecast
# plot(forecast_arima)
# time(forecast_arima)
# Create a data frame to include both actual and forecasted data
# Assuming you have a time series object 'life_exp_ts' and the forecast model 'forecast_developed'
# Create a data frame to include both actual and forecasted data
forecast_df <- data.frame(
Year = c(time(life_exp_ts), time(forecast_arima$mean)),
Value = c(life_exp_ts, forecast_arima$mean),
Type = c(rep("Actual", length(life_exp_ts)), rep("Forecast", length(forecast_arima$mean)))
)
# Plot using ggplot2
library(ggplot2)
ggplot(forecast_df, aes(x = Year, y = Value, color = Type)) +
geom_line() +
scale_x_continuous(
breaks = seq(2000, 2000 + length(life_exp_ts) + length(forecast_arima$mean) - 1, by = 10)
) +
labs(title = "ARIMA Forecast for Life Expectancy", x = "Year", y = "Life Expectancy") +
theme(
axis.text.x = element_text(angle = 45, hjust = 1)  # Rotate x-axis labels by 45 degrees
)
forecast_arima <- forecast(model_arima, h = 20)  # h = 10 is the number of time steps to forecast
# plot(forecast_arima)
# time(forecast_arima)
# Create a data frame to include both actual and forecasted data
# Assuming you have a time series object 'life_exp_ts' and the forecast model 'forecast_developed'
# Create a vector of years corresponding to the time series
years <- seq(2000, 2000 + length(life_exp_ts) - 1)
# Create a data frame to include both actual and forecasted data
forecast_df <- data.frame(
Year = c(years, years[length(years)] + 1: length(forecast_developed$mean)),  # Adjust forecast years
Value = c(life_exp_ts, forecast_developed$mean),
Type = c(rep("Actual", length(life_exp_ts)), rep("Forecast", length(forecast_developed$mean)))
)
forecast_arima <- forecast(model_arima, h = 20)  # h = 10 is the number of time steps to forecast
# plot(forecast_arima)
# time(forecast_arima)
# Create a data frame to include both actual and forecasted data
# Assuming you have a time series object 'life_exp_ts' and the forecast model 'forecast_developed'
# Create a vector of years corresponding to the time series
years <- seq(2000, 2000 + length(life_exp_ts) - 1)
# Create a data frame to include both actual and forecasted data
forecast_df <- data.frame(
Year = c(years, years[length(years)] + 1: length(forecast_arima$mean)),  # Adjust forecast years
Value = c(life_exp_ts, forecast_arima$mean),
Type = c(rep("Actual", length(life_exp_ts)), rep("Forecast", length(forecast_arima$mean)))
)
# Plot using ggplot2
library(ggplot2)
ggplot(forecast_df, aes(x = Year, y = Value, color = Type)) +
geom_line() +
scale_x_continuous(
breaks = seq(2000, 2000 + length(life_exp_ts) + length(forecast_arima$mean) - 1, by = 10)  # Show labels every 10 years
) +
labs(title = "ARIMA Forecast for Life Expectancy", x = "Year", y = "Life Expectancy") +
theme(
axis.text.x = element_text(angle = 45, hjust = 1)  # Rotate x-axis labels by 45 degrees for readability
)
View(life_exp_clean)
library(dplyr)
life_exp_clean <- life_exp_clean |>
mutate(life_exp_lvl = case_when(
life_expectancy < 60 ~ "Low",
life_expectancy >= 60 & life_expectancy < 70 ~ "Medium",
life_expectancy >= 70 & life_expectancy < 80 ~ "High",
life_expectancy >= 80 ~ "Very High"
))
library(dplyr)
life_exp_clean <- life_exp_clean |>
mutate(life_exp_lvl = case_when(
Life_expectancy < 60 ~ "Low",
Life_expectancy >= 60 & Life_expectancy < 70 ~ "Medium",
Life_expectancy >= 70 & Life_expectancy < 80 ~ "High",
Life_expectancy >= 80 ~ "Very High"
))
life_exp_clean
library(knitr)
life_model <- glm(as.factor(life_exp_lvl) ~ Status + percentage_expenditure + GDP + Population + HIV/AIDS + Schooling + Alcohol + Total_expenditure + thinness_1_19_years + infant_deaths + Hepatitus_B + Measles + BMI + Polio + Diptheria , data = life_exp_clean)
library(knitr)
life_model <- glm(as.factor(life_exp_lvl) ~ Status + percentage_expenditure + GDP + Population + Schooling + Alcohol + Total_expenditure + thinness_1_19_years + infant_deaths + Hepatitus_B + Measles + BMI + Polio + Diptheria , data = life_exp_clean)
library(knitr)
life_model <- glm(as.factor(life_exp_lvl) ~ Status + percentage_expenditure + GDP + Population + Schooling + Alcohol + Total_expenditure + thinness_1_19_years + infant_deaths + Hepatitis_B + Measles + BMI + Polio + Diptheria, data = life_exp_clean)
library(knitr)
life_model <- glm(as.factor(life_exp_lvl) ~ Status + percentage_expenditure + GDP + Population + Schooling + Alcohol + Total_expenditure + thinness_1_19_years + infant_deaths + Hepatitis_B + Measles + BMI + Polio + Diphtheria, data = life_exp_clean)
library(knitr)
summary(life_exp_clean)  # Check for NAs in the dataset
life_model <- glm(as.factor(life_exp_lvl) ~ Status + percentage_expenditure + GDP + Population + Schooling + Alcohol + Total_expenditure + thinness_1_19_years + infant_deaths + Hepatitis_B + Measles + BMI + Polio + Diphtheria, data = life_exp_clean)
library(knitr)
summary(life_exp_clean)  # Check for NAs in the dataset
# life_model <- glm(as.factor(life_exp_lvl) ~ Status + percentage_expenditure + GDP + Population + Schooling + Alcohol + Total_expenditure + thinness_1_19_years + infant_deaths + Hepatitis_B + Measles + BMI + Polio + Diphtheria, data = life_exp_clean)
#
# tidy(life_model) |>
#   kable(digits = 3)
library(knitr)
life_exp_clean2 <- na.omit(life_exp_clean)
life_model <- glm(as.factor(life_exp_lvl) ~ Status + percentage_expenditure + GDP + Population + Schooling + Alcohol + Total_expenditure + thinness_1_19_years + infant_deaths + Hepatitis_B + Measles + BMI + Polio + Diphtheria, data = life_exp_clean)
library(knitr)
life_exp_clean2 <- na.omit(life_exp_clean)
life_model <- glm(as.factor(life_exp_lvl) ~ Status + percentage_expenditure + GDP + Population + Schooling + Alcohol + Total_expenditure + thinness_1_19_years + infant_deaths + Hepatitis_B + Measles + BMI + Polio + Diphtheria, data = life_exp_clean2)
library(knitr)
life_exp_clean2 <- na.omit(life_exp_clean)
life_model <- glm(as.factor(life_exp_lvl) ~ Status + percentage_expenditure + GDP + Population + Schooling, data = life_exp_clean2)
# Check for Inf or NaN values in your dataset
sum(is.na(life_exp_clean2$life_exp_lvl))        # Check NA values in the dependent variable
sum(is.infinite(life_exp_clean2$GDP))           # Replace GDP with any column name to check Inf values
sum(is.nan(life_exp_clean2$GDP))                # Check for NaN values
library(knitr)
table(life_exp_clean2$life_exp_lvl)
life_exp_clean2 <- na.omit(life_exp_clean)
life_model <- glm(as.factor(life_exp_lvl) ~ Status + percentage_expenditure + GDP + Population + Schooling, data = life_exp_clean2)
library(knitr)
life_exp_clean2 <- na.omit(life_exp_clean)
table(life_exp_clean2$life_exp_lvl)
life_model <- glm(as.factor(life_exp_lvl) ~ Status + percentage_expenditure + GDP + Population + Schooling, data = life_exp_clean2)
library(knitr)
life_exp_clean2 <- na.omit(life_exp_clean)
table(life_exp_clean2$life_exp_lvl)
# life_model <- glm(as.factor(life_exp_lvl) ~ Status + percentage_expenditure + GDP + Population + Schooling, data = life_exp_clean2)
#
# tidy(life_model) |>
#   kable(digits = 3)
library(knitr)
life_exp_clean2 <- na.omit(life_exp_clean)
table(life_exp_clean2$life_exp_lvl)
life_model <- glm(as.factor(life_exp_lvl) ~ Status + percentage_expenditure, data = life_exp_clean2)
library(knitr)
life_exp_clean2 <- na.omit(life_exp_clean)
table(life_exp_clean2$life_exp_lvl)
life_model <- glm(as.factor(life_exp_lvl) ~ percentage_expenditure, data = life_exp_clean2)
library(knitr)
life_exp_clean2 <- na.omit(life_exp_clean)
table(life_exp_clean2$life_exp_lvl)
life_model <- glm(as.factor(life_exp_lvl) ~ percentage_expenditure, data = life_exp_clean2)
str(life_exp_clean2)
library(knitr)
life_exp_clean2 <- na.omit(life_exp_clean)
table(life_exp_clean2$life_exp_lvl)
life_model <- glm(as.factor(life_exp_lvl) ~ as.factor(Status), data = life_exp_clean2)
library(knitr)
life_model <- multinom(life_exp_lvl ~ GDP, data = life_exp_clean)
library(knitr)
library(nnet)
life_model <- multinom(life_exp_lvl ~ GDP, data = life_exp_clean)
library(knitr)
library(nnet)
life_model <- multinom(life_exp_lvl ~ GDP, data = life_exp_clean)
summary(life_model)
library(knitr)
library(nnet)
life_model <- multinom(life_exp_lvl ~ GDP + Population + Alcohol + percentage_expenditure, data = life_exp_clean)
summary(life_model)
library(knitr)
library(nnet)
colnames(life_exp_clean)
life_model <- multinom(life_exp_lvl ~ GDP + Population + Alcohol + percentage_expenditure + infant_deaths + , data = life_exp_clean)
library(knitr)
library(nnet)
colnames(life_exp_clean)
life_model <- multinom(life_exp_lvl ~ GDP + Population + Alcohol + percentage_expenditure + infant_deaths + Hepatitis_B + BMI + Polio + Diphtheria + thinness_1_19_years + Income_composition_of_resources + Schooling + thinness_5_9_years + HIV/AIDS + Measles, data = life_exp_clean)
library(knitr)
library(nnet)
colnames(life_exp_clean)
life_model <- multinom(life_exp_lvl ~ GDP + Population + Alcohol + percentage_expenditure + infant_deaths + Hepatitis_B + BMI + Polio + Diphtheria + thinness_1_19_years + Income_composition_of_resources + Schooling + thinness_5_9_years + Measles, data = life_exp_clean)
summary(life_model)
anova(life_model)
library(knitr)
library(nnet)
life_model <- multinom(life_exp_lvl ~ GDP + Population + Alcohol + percentage_expenditure + infant_deaths + Hepatitis_B + BMI + Polio + Diphtheria + thinness_1_19_years + Income_composition_of_resources + Schooling + thinness_5_9_years + Measles, data = life_exp_clean)
summary(life_model)
# Extract coefficients and standard errors from the model
coef_summary <- summary(model)$coefficients
library(knitr)
library(nnet)
life_model <- multinom(life_exp_lvl ~ GDP + Population + Alcohol + percentage_expenditure + infant_deaths + Hepatitis_B + BMI + Polio + Diphtheria + thinness_1_19_years + Income_composition_of_resources + Schooling + thinness_5_9_years + Measles, data = life_exp_clean)
summary(life_model)
# Extract coefficients and standard errors from the model
coef_summary <- summary(life_model)$coefficients
se_summary <- summary(life_model)$standard.errors
# Calculate z-values (coefficients / standard errors)
z_values <- coef_summary / se_summary
# Calculate p-values using the normal distribution (two-tailed)
p_values <- 2 * (1 - pnorm(abs(z_values)))
# Display the z-values and p-values
data.frame(z_values, p_values)
library(knitr)
library(nnet)
life_model <- multinom(life_exp_lvl ~ GDP + Population + Alcohol + percentage_expenditure + infant_deaths + Hepatitis_B + BMI + Polio + Diphtheria + thinness_1_19_years + Income_composition_of_resources + Schooling + thinness_5_9_years + Measles, data = life_exp_clean)
summary(life_model)
# Extract coefficients and standard errors from the model
coef_summary <- summary(life_model)$coefficients
se_summary <- summary(life_model)$standard.errors
# Calculate z-values (coefficients / standard errors)
z_values <- coef_summary / se_summary
# Calculate p-values using the normal distribution (two-tailed)
p_values <- 2 * (1 - pnorm(abs(z_values)))
# Display the p-values
data.frame(P_values = p_values)
auc(life_model)
BIC(life_model)
BIC(life_model)
# Install and load the pROC package
install.packages("pROC")
library(pROC)
# Predicted probabilities
pred_probs <- predict(model, type = "probs")
BIC(life_model)
# Install and load the pROC package
install.packages("pROC")
library(pROC)
# Predicted probabilities
pred_probs <- predict(life_model, type = "probs")
# Actual class labels (you'll need to use the appropriate variable, e.g., 'life_exp_lvl')
actual <- life_exp_clean$life_exp_lvl
# Calculate multiclass AUC using one-vs-rest
roc_obj <- multiclass.roc(actual, pred_probs)
# Display AUC
auc_value <- roc_obj$auc
print(auc_value)
BIC(life_model)
library(dplyr)
life_exp_clean <- life_exp_clean |>
mutate(life_exp_lvl = case_when(
Life_expectancy < 60 ~ "Low",
Life_expectancy >= 60 & Life_expectancy < 70 ~ "Medium",
Life_expectancy >= 70 & Life_expectancy < 80 ~ "High",
Life_expectancy >= 80 ~ "Very High"
))
life_exp_clean
library(knitr)
library(nnet)
life_model <- multinom(life_exp_lvl ~ GDP + Population + Alcohol + percentage_expenditure + infant_deaths + Hepatitis_B + BMI + Polio + Diphtheria + thinness_1_19_years + Income_composition_of_resources + Schooling + thinness_5_9_years + Measles, data = life_exp_clean)
summary(life_model)
# Extract coefficients and standard errors from the model
coef_summary <- summary(life_model)$coefficients
se_summary <- summary(life_model)$standard.errors
# Calculate z-values (coefficients / standard errors)
z_values <- coef_summary / se_summary
# Calculate p-values using the normal distribution (two-tailed)
p_values <- 2 * (1 - pnorm(abs(z_values)))
# Display the p-values
data.frame(P_values = p_values)
BIC(life_model)
# Install and load the pROC package
install.packages("pROC")
library(pROC)
# Predicted probabilities
pred_probs <- predict(life_model, type = "probs")
# Actual class labels (you'll need to use the appropriate variable, e.g., 'life_exp_lvl')
actual <- life_exp_clean$life_exp_lvl
# Calculate multiclass AUC using one-vs-rest
roc_obj <- multiclass.roc(actual, pred_probs)
# Display AUC
auc_value <- roc_obj$auc
print(auc_value)
BIC(life_model)
BIC(life_model)
# Install and load the pROC package
install.packages("pROC")
library(pROC)
# Predicted probabilities
pred_probs <- predict(life_model, type = "probs")
# Install and load the pROC package
install.packages("pROC")
library(pROC)
# Predicted probabilities
pred_probs <- predict(life_model, type = "probs")
install.packages("pROC")
# Install and load the pROC package
install.packages("pROC")
library(pROC)
# Predicted probabilities
pred_probs <- predict(life_model, type = "probs")
# Install and load the pROC package
install.packages("pROC")
library(pROC)
# Predicted probabilities
pred_probs <- predict(life_model, type = "probs")
install.packages("pROC")
# Install and load the pROC package
install.packages("pROC")
library(pROC)
# Predicted probabilities
pred_probs <- predict(life_model, type = "probs")
